# -*- coding: utf-8 -*-
"""Development Indicator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aCaDUX7-LgspZoJLmfdQHh2dTvETbZMp
"""

!pip install selenium

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# # Add debian buster
# cat > /etc/apt/sources.list.d/debian.list <<'EOF'
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster.gpg] http://deb.debian.org/debian buster main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster-updates.gpg] http://deb.debian.org/debian buster-updates main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-security-buster.gpg] http://deb.debian.org/debian-security buster/updates main
# EOF
# 
# # Add keys
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A
# 
# apt-key export 77E11517 | gpg --dearmour -o /usr/share/keyrings/debian-buster.gpg
# apt-key export 22F3D138 | gpg --dearmour -o /usr/share/keyrings/debian-buster-updates.gpg
# apt-key export E562B32A | gpg --dearmour -o /usr/share/keyrings/debian-security-buster.gpg
# 
# # Prefer debian repo for chromium* packages only
# # Note the double-blank lines between entries
# cat > /etc/apt/preferences.d/chromium.pref << 'EOF'
# Package: *
# Pin: release a=eoan
# Pin-Priority: 500
# 
# Package: *
# Pin: origin "deb.debian.org"
# Pin-Priority: 300
# 
# 
# Package: chromium*
# Pin: origin "deb.debian.org"
# Pin-Priority: 700
# EOF

!apt-get update
!apt-get install chromium chromium-driver
from selenium import webdriver
def web_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--verbose")
    options.add_argument('--no-sandbox')
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument("--window-size=1920, 1200")
    options.add_argument('--disable-dev-shm-usage')
    driver = webdriver.Chrome(options=options)
    return driver

! pip install bs4
! pip install lxml
import requests
import re
import pandas as pd
import time
import random
from datetime import date, timedelta
import pandas as pd
from urllib.parse import urljoin
import requests
from bs4 import BeautifulSoup as soup
from urllib.parse import urljoin
from bs4 import BeautifulSoup as bs
from selenium.webdriver.common.by import By

# Retrieve data from world bank
! pip install wbgapi
import wbgapi as wb
# Next step is trying to obtain the list of id in the database
! pip install epigraphhub
from epigraphhub.data.worldbank import search_in_indicators

# Check what is inside the data
all_world_data = wb.source.info()
print(all_world_data)

#Since we are interested in corruption-related metrics, keyword'governance' can be passed
corruption_db = wb.series.info(db=3)
print(corruption_db)

# check the economy(country) in the database
print(wb.economy.info())

# define function in database 3 to find the correpsonding id of each indicator for later api query purpose.
def series_list(k):
  df_series_list = pd.DataFrame(columns=['id','value'])
  for i in range(len(k)):
    df_ind = search_in_indicators(k[i],db = 3)
    df_series_list = pd.concat([df_series_list,df_ind])
    i+=1
  return df_series_list

# Extract the id from the dataframe
keyword = ['corruption','Government','Political','Rule','Regulatory','Voice']
series = series_list(keyword)
series_id = list(series['id'])

# For this individual assignment purpose, only estimates in the series_id will be used in the analysis, without considering its confidence interval and standard deviation
series_analysis_id = [i for i in series_id if "EST" in i]
# Construct the first dataset consisting the country and 
def worldbank(series_id_index):
  series = series_analysis_id[series_id_index]
  country_list = []
  code_list = []
  date_list = []
  value_list = []
  for i in range(len(country_id)):
    country = country_id[i]
    control=pd.DataFrame(columns = ['country','country_code','year','corruption_control'])
    url = 'http://api.worldbank.org/countries/{0}/indicators/{1}?source=3'.format(country,series)
    try:
      response = requests.get(url,timeout=(5, 27))
      file = soup(response.text, "lxml")
      country = file.find_all('wb:country')
      country_code = file.find_all('wb:countryiso3code')
      date = file.find_all('wb:date')
      value= file.find_all('wb:value')
      for name in country:
        country_list.append(name.text)
      for code in country_code:
        code_list.append(code.text)
      for d in date:
        date_list.append(d.text)
      for v in value:
        value_list.append(v.text)
      control_corruption = pd.DataFrame({'country':country_list,'country_code': code_list,'year':date_list, 'corruption_control': value_list})
      control = pd.concat([control,control_corruption])
    except Exception:
      pass
    i+=1
  return control

corruption_con = worldbank(0)
government_effectiveness= worldbank(1)
political_stability = worldbank(2)
rule_of_law = worldbank(3)
regulatory_quality = worldbank(4)
Voice_accountability = worldbank(5)